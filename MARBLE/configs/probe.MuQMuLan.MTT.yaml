seed_everything: 1234
ckpt_path: null # to resume

trainer:
  fast_dev_run: false
  accelerator: gpu
  strategy: ddp # or ddp_find_unused_parameters 
  devices: [4,5,6,7] # torchrun --nproc_per_node=4 cli.py fit -c xxx
  # devices: [0,]
  accumulate_grad_batches: 1
  num_nodes: 1
  precision: bf16 # or 32, or 16
  max_epochs: 50
  check_val_every_n_epoch: 1
  num_sanity_val_steps: 10
  log_every_n_steps: 5

  callbacks:
    - class_path: lightning.pytorch.callbacks.ModelCheckpoint
      init_args:
        dirpath: "./output/probe.MTT.MuQMuLan/checkpoints/" # Please specify your own path
        filename: "best"
        save_top_k: 1 # -1 to save all checkpoints
    - class_path: marble.modules.callbacks.LoadLatestCheckpointCallback # for testing
    - class_path: lightning.pytorch.callbacks.LearningRateMonitor
      init_args:
        logging_interval: step
    - class_path: lightning.pytorch.callbacks.early_stopping.EarlyStopping
      init_args:
        monitor: "val/auroc"               # 要监控的 metric 名称
        check_on_train_epoch_end: false
        patience: 10                       # 在多少次验证后无改进就停止
        mode: "max"                       # “val_loss” 下降时才算改进
  logger:
    class_path: lightning.pytorch.loggers.WandbLogger
    init_args:
      project: "marble"
      name: "probe.MTT.MuQMuLan"
      save_dir: "./output/probe.MTT.MuQMuLan/"


model:
  class_path: marble.tasks.MTT.probe.ProbeAudioTask
  init_args:
    sample_rate: 24000
    use_ema: false

    encoder:
      class_path: marble.encoders.MuQMuLan.model.MuQMuLan_Encoder
      init_args:
        pre_trained_folder: null
        train_mode: freeze  # also supports lora, or full
      
    emb_transforms:
      - class_path: marble.modules.transforms.LayerSelector
        init_args:
          layers: [0]  # something like [1, 3, "10..72"]
      - class_path: marble.modules.transforms.TimeAvgPool # (batch_size, num_layers, 1, hidden_size)
    
    decoders:
      - class_path: marble.modules.decoders.MLPDecoder
        init_args:
          in_dim: 512
          out_dim: 50 # 10 genres
          hidden_layers: [512]
          activation_fn: 
            class_path: torch.nn.ReLU
          dropout: 0.2

    losses:
      - class_path: torch.nn.BCEWithLogitsLoss

    metrics:
      train:
        f1:
          class_path: torchmetrics.F1Score # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: macro # Can be 'micro', 'macro', or 'weighted'
        f1_micro:
          class_path: torchmetrics.F1Score # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: micro # Can be 'micro', 'macro', or 'weighted'
      val:
        f1:
          class_path: torchmetrics.F1Score # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: macro # Can be 'micro', 'macro', or 'weighted'
        auroc:
          class_path: torchmetrics.AUROC # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: macro
        ap:
          class_path: torchmetrics.AveragePrecision # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: macro
        f1_micro:
          class_path: torchmetrics.F1Score # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: micro # Can be 'micro', 'macro', or 'weighted'
      test:
        f1:
          class_path: torchmetrics.F1Score # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: macro # Can be 'micro', 'macro', or 'weighted'
        f1_micro:
          class_path: torchmetrics.F1Score # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: micro # Can be 'micro', 'macro', or 'weighted'
        auroc:
          class_path: torchmetrics.AUROC # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: macro
        ap:
          class_path: torchmetrics.AveragePrecision # ADD
          init_args:
            task: multilabel
            num_labels: 50
            average: macro
    
data:
  class_path: marble.tasks.MTT.datamodule.MTTDataModule
  init_args:
    batch_size: 32
    num_workers: 32

    train:
      class_path: marble.tasks.MTT.datamodule.MTTAudioTrain
      init_args:
        sample_rate: 24000
        channels: 1
        clip_seconds: 30
        min_clip_ratio: 0.8 # at least 80% of the clip length
        channel_mode: mix # first, random, mix
        backend: "soundfile" # or "sox_io"
        jsonl: data/MTT/MTT.train.jsonl
    val:
      class_path: marble.tasks.MTT.datamodule.MTTAudioVal
      init_args:
        sample_rate: 24000
        channels: 1
        clip_seconds: 30
        min_clip_ratio: 0.8
        channel_mode: mix
        backend: "soundfile" # or "sox_io"
        jsonl: data/MTT/MTT.val.jsonl
    test:
      class_path: marble.tasks.MTT.datamodule.MTTAudioTest
      init_args:
        sample_rate: 24000
        channels: 1
        clip_seconds: 30
        min_clip_ratio: 0.8
        channel_mode: mix
        backend: "soundfile" # or "sox_io"
        jsonl: data/MTT/MTT.test.jsonl

optimizer:
  class_path: torch.optim.Adam
  init_args:
    lr: 1e-3

lr_scheduler:
  class_path: lightning.pytorch.cli.ReduceLROnPlateau
  init_args:
    mode: "max"
    factor: 0.5
    patience: 3
    monitor: "val/auroc"
